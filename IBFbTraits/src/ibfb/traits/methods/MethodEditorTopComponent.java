/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ibfb.traits.methods;

import java.util.Set;
import org.cimmyt.cril.ibwb.api.AppServices;
import org.cimmyt.cril.ibwb.api.AppServicesProxy;
import org.cimmyt.cril.ibwb.commongui.DialogUtil;
import org.cimmyt.cril.ibwb.domain.Tmethod;
import org.cimmyt.cril.ibwb.domain.TmsMethod;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//ibfb.traits.methods//MethodEditor//EN",
autostore = false)
@TopComponent.Description(preferredID = "MethodEditorTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "ibfb.traits.methods.MethodEditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_MethodEditorAction",
preferredID = "MethodEditorTopComponent")
public final class MethodEditorTopComponent extends TopComponent {

    private TmsMethod tmethod;

    public MethodEditorTopComponent(TmsMethod tmethod) {
        this.tmethod = tmethod;
        initComponents();
        //setName(NbBundle.getMessage(MethodEditorTopComponent.class, "CTL_MethodEditorTopComponent"));
        StringBuilder name = new StringBuilder();
        name.append(NbBundle.getMessage(MethodEditorTopComponent.class, "CTL_MethodEditorTopComponent"));
        name.append("(").append(tmethod.getTmethid()).append(")");
        setName(name.toString());
        setToolTipText(NbBundle.getMessage(MethodEditorTopComponent.class, "HINT_MethodEditorTopComponent"));
        checkEditingAllowed();
    }

    public MethodEditorTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(MethodEditorTopComponent.class, "CTL_MethodEditorTopComponent"));
        setToolTipText(NbBundle.getMessage(MethodEditorTopComponent.class, "HINT_MethodEditorTopComponent"));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        lblMethodId = new javax.swing.JLabel();
        txtMethodId = new javax.swing.JTextField();
        txtTmname = new javax.swing.JTextField();
        txtTmabbr = new javax.swing.JTextField();
        lblMethodName = new javax.swing.JLabel();
        lblAbbreviature = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        btnSave = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(lblMethodId, org.openide.util.NbBundle.getMessage(MethodEditorTopComponent.class, "MethodEditorTopComponent.lblMethodId.text")); // NOI18N

        txtMethodId.setEditable(false);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${tmethod.tmethid}"), txtMethodId, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${tmethod.tmname}"), txtTmname, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${tmethod.tmabbr}"), txtTmabbr, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        org.openide.awt.Mnemonics.setLocalizedText(lblMethodName, org.openide.util.NbBundle.getMessage(MethodEditorTopComponent.class, "MethodEditorTopComponent.lblMethodName.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblAbbreviature, org.openide.util.NbBundle.getMessage(MethodEditorTopComponent.class, "MethodEditorTopComponent.lblAbbreviature.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblDescription, org.openide.util.NbBundle.getMessage(MethodEditorTopComponent.class, "MethodEditorTopComponent.lblDescription.text")); // NOI18N

        txtDescription.setColumns(20);
        txtDescription.setLineWrap(true);
        txtDescription.setRows(5);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${tmethod.tmdesc}"), txtDescription, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(txtDescription);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ibfb/traits/core/images/save.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnSave, org.openide.util.NbBundle.getMessage(MethodEditorTopComponent.class, "MethodEditorTopComponent.btnSave.text")); // NOI18N
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSave.setIconTextGap(0);
        btnSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMethodId)
                    .addComponent(lblMethodName)
                    .addComponent(lblAbbreviature)
                    .addComponent(lblDescription))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTmname, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                    .addComponent(txtMethodId, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTmabbr, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMethodId)
                    .addComponent(txtMethodId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTmname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMethodName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTmabbr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAbbreviature))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDescription)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSave)
                .addContainerGap(77, Short.MAX_VALUE))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        saveOrUpdateRecord();
    }//GEN-LAST:event_btnSaveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JButton jButtonSaveToExcel;
    private javax.swing.JButton jButtonSaveToExcel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAbbreviature;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblMethodId;
    private javax.swing.JLabel lblMethodName;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtMethodId;
    private javax.swing.JTextField txtTmabbr;
    private javax.swing.JTextField txtTmname;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public TmsMethod getTmethod() {
        return tmethod;
    }

    public void setTmethod(TmsMethod tmethod) {
        this.tmethod = tmethod;
    }

    
    
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public static MethodEditorTopComponent getMethodEditorTopComponent(TmsMethod tmethod) {
        MethodEditorTopComponent scalesEditorTopComponent = null;
        Set<TopComponent> comps = TopComponent.getRegistry().getOpened();
        for (TopComponent tc : comps) {
            if (tc instanceof MethodEditorTopComponent) {
                MethodEditorTopComponent setc = (MethodEditorTopComponent) tc;
                StringBuilder name = new StringBuilder();
                name.append(NbBundle.getMessage(MethodEditorTopComponent.class, "CTL_MethodEditorTopComponent"));
                name.append("(").append(tmethod.getTmethid()).append(")");

                if (setc.getName().equals(name.toString())) {
                    scalesEditorTopComponent = setc;
                    break;
                }
            }
        }
        return scalesEditorTopComponent;
    }
    
    private void checkEditingAllowed() {
        boolean editingAllowed = true;
        if (this.tmethod.getTmethid().intValue() > 0 ) {
            editingAllowed = false;
        }
        txtTmname.setEditable(editingAllowed);
        txtTmabbr.setEditable(editingAllowed);
        txtDescription.setEditable(editingAllowed);
        btnSave.setEnabled(editingAllowed);
       
    }
    
    private void saveOrUpdateRecord() {
        if (tmethod.getTmethid() == 0 ) {
            AppServicesProxy.getDefault().appServices().addTmsMethod(tmethod);
            DialogUtil.displayInfo("Method added");
        } else {
            AppServicesProxy.getDefault().appServices().updateTmsMethod(tmethod);
            DialogUtil.displayInfo("Method updated");
        }
    }
}
