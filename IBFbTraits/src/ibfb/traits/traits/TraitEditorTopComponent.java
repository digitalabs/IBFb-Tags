/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package ibfb.traits.traits;

import ibfb.traits.traits.model.MeasuredInCellRenderer;
import ibfb.traits.traits.model.MeasuredInTableModel;
import java.awt.event.KeyEvent;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.table.TableColumn;
import org.cimmyt.cril.ibwb.api.AppServicesProxy;
import org.cimmyt.cril.ibwb.commongui.DialogUtil;
import org.cimmyt.cril.ibwb.commongui.OntologyTool;
import org.cimmyt.cril.ibwb.domain.Measuredin;
import org.cimmyt.cril.ibwb.domain.Scales;
import org.cimmyt.cril.ibwb.domain.Tmethod;
import org.cimmyt.cril.ibwb.domain.TmsMethod;
import org.cimmyt.cril.ibwb.domain.TmsScaleCon;
import org.cimmyt.cril.ibwb.domain.TmsScaleDis;
import org.cimmyt.cril.ibwb.domain.Traits;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//ibfb.traits.traits//TraitEditor//EN",
autostore = false)
@TopComponent.Description(preferredID = "TraitEditorTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "ibfb.traits.traits.TraitEditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_TraitEditorAction",
preferredID = "TraitEditorTopComponent")
public final class TraitEditorTopComponent extends TopComponent {

    private Traits trait;
    private List<TmsMethod> methodList;
    private List<Scales> scalesList;
    boolean editable = false;

    public TraitEditorTopComponent(Traits trait) {
        this.trait = trait;
        initComponents();
        String tabName = NbBundle.getMessage(TraitEditorTopComponent.class, "CTL_TraitEditorTopComponent");
        setName(tabName + "(" + trait.getTid() + ")");
        setToolTipText(NbBundle.getMessage(TraitEditorTopComponent.class, "HINT_TraitEditorTopComponent"));
        fillCboTraitGroup();
        fillCboMethod();
        fillCboScales();
        enableReadOnly();
        lblTraitid.setVisible(false);
        txtTraitId.setVisible(false);
        tblMeasuredIn.getColumnModel().getColumn(4).setCellRenderer( new MeasuredInCellRenderer());
        tblMeasuredIn.getColumnModel().getColumn(7).setCellRenderer( new ScaleDefCellRenderer());
        assignColumnSizes();
        assignScaleDefinitionRowEditor();
        tblMeasuredIn.setRowHeight(50);
    }

    public TraitEditorTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(TraitEditorTopComponent.class, "CTL_TraitEditorTopComponent"));
        setToolTipText(NbBundle.getMessage(TraitEditorTopComponent.class, "HINT_TraitEditorTopComponent"));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        pMnuScales = new javax.swing.JPopupMenu();
        mnuSetAsStandarScale = new javax.swing.JMenuItem();
        txtTid = new javax.swing.JTextField();
        txtTraitId = new javax.swing.JTextField();
        txtTraitName = new javax.swing.JTextField();
        txtTraitAbbr = new javax.swing.JTextField();
        txtTraitDesc = new javax.swing.JTextField();
        cboTnstat = new javax.swing.JComboBox();
        cboTraitGroup = new javax.swing.JComboBox();
        txtOntology = new javax.swing.JTextField();
        cboType = new javax.swing.JComboBox();
        lblId = new javax.swing.JLabel();
        lblTraitid = new javax.swing.JLabel();
        lblTraitname = new javax.swing.JLabel();
        lblTraitAbbr = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        lblTnstat = new javax.swing.JLabel();
        lblGroup = new javax.swing.JLabel();
        lblOntology = new javax.swing.JLabel();
        lblType = new javax.swing.JLabel();
        btnBrowse = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblMethod = new javax.swing.JLabel();
        cboMethod = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        cboScale = new javax.swing.JComboBox();
        btnAddScaleMethod = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMeasuredIn = new javax.swing.JTable();
        btnSetAssStandarScale = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(mnuSetAsStandarScale, org.openide.util.NbBundle.getMessage(TraitEditorTopComponent.class, "TraitEditorTopComponent.mnuSetAsStandarScale.text")); // NOI18N
        mnuSetAsStandarScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSetAsStandarScaleActionPerformed(evt);
            }
        });
        pMnuScales.add(mnuSetAsStandarScale);

        txtTid.setEditable(false);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${trait.tid}"), txtTid, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${trait.traitid}"), txtTraitId, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${trait.trname}"), txtTraitName, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${trait.trabbr}"), txtTraitAbbr, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${trait.trdesc}"), txtTraitDesc, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        cboTnstat.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1. PREFERRED NAME", "2. PREFERRED ABBREVIATION" }));

        cboTraitGroup.setEditable(true);
        cboTraitGroup.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${trait.ontology}"), txtOntology, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        cboType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "FACTOR", "CONSTANT", "VARIATE", " " }));

        org.openide.awt.Mnemonics.setLocalizedText(lblId, org.openide.util.NbBundle.getMessage(TraitEditorTopComponent.class, "TraitEditorTopComponent.lblId.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblTraitid, org.openide.util.NbBundle.getMessage(TraitEditorTopComponent.class, "TraitEditorTopComponent.lblTraitid.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblTraitname, org.openide.util.NbBundle.getMessage(TraitEditorTopComponent.class, "TraitEditorTopComponent.lblTraitname.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblTraitAbbr, org.openide.util.NbBundle.getMessage(TraitEditorTopComponent.class, "TraitEditorTopComponent.lblTraitAbbr.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblDescription, org.openide.util.NbBundle.getMessage(TraitEditorTopComponent.class, "TraitEditorTopComponent.lblDescription.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblTnstat, org.openide.util.NbBundle.getMessage(TraitEditorTopComponent.class, "TraitEditorTopComponent.lblTnstat.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblGroup, org.openide.util.NbBundle.getMessage(TraitEditorTopComponent.class, "TraitEditorTopComponent.lblGroup.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblOntology, org.openide.util.NbBundle.getMessage(TraitEditorTopComponent.class, "TraitEditorTopComponent.lblOntology.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblType, org.openide.util.NbBundle.getMessage(TraitEditorTopComponent.class, "TraitEditorTopComponent.lblType.text")); // NOI18N

        btnBrowse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ibfb/traits/traits/browse.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnBrowse, org.openide.util.NbBundle.getMessage(TraitEditorTopComponent.class, "TraitEditorTopComponent.btnBrowse.text")); // NOI18N
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(TraitEditorTopComponent.class, "TraitEditorTopComponent.jPanel1.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblMethod, org.openide.util.NbBundle.getMessage(TraitEditorTopComponent.class, "TraitEditorTopComponent.lblMethod.text")); // NOI18N

        cboMethod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(TraitEditorTopComponent.class, "TraitEditorTopComponent.jLabel1.text")); // NOI18N

        cboScale.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        org.openide.awt.Mnemonics.setLocalizedText(btnAddScaleMethod, org.openide.util.NbBundle.getMessage(TraitEditorTopComponent.class, "TraitEditorTopComponent.btnAddScaleMethod.text")); // NOI18N
        btnAddScaleMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddScaleMethodActionPerformed(evt);
            }
        });

        tblMeasuredIn.setModel(new ibfb.traits.traits.model.MeasuredInTableModel(new java.util.ArrayList<Measuredin>()));
        tblMeasuredIn.setComponentPopupMenu(pMnuScales);
        jScrollPane1.setViewportView(tblMeasuredIn);

        org.openide.awt.Mnemonics.setLocalizedText(btnSetAssStandarScale, org.openide.util.NbBundle.getMessage(TraitEditorTopComponent.class, "TraitEditorTopComponent.btnSetAssStandarScale.text")); // NOI18N
        btnSetAssStandarScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetAssStandarScaleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 703, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cboScale, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblMethod)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cboMethod, 0, 74, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAddScaleMethod)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSetAssStandarScale)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMethod)
                    .addComponent(cboScale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btnAddScaleMethod)
                    .addComponent(btnSetAssStandarScale))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE))
        );

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ibfb/traits/core/images/save.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnSave, org.openide.util.NbBundle.getMessage(TraitEditorTopComponent.class, "TraitEditorTopComponent.btnSave.text")); // NOI18N
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblId)
                                .addGap(89, 89, 89)
                                .addComponent(txtTid, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblTraitid)
                                .addGap(36, 36, 36)
                                .addComponent(txtTraitId, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTraitname)
                                    .addComponent(lblTraitAbbr)
                                    .addComponent(lblDescription)
                                    .addComponent(lblTnstat))
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtTraitDesc, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)
                                    .addComponent(txtTraitName, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtTraitAbbr, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(cboTraitGroup, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cboTnstat, javax.swing.GroupLayout.Alignment.LEADING, 0, 183, Short.MAX_VALUE)
                                        .addComponent(cboType, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addContainerGap())
                    .addComponent(lblGroup)
                    .addComponent(lblType)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblOntology)
                        .addGap(55, 55, 55)
                        .addComponent(txtOntology, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSave)
                        .addContainerGap(678, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblId)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtTid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtTraitId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblTraitid)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTraitName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTraitname))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTraitAbbr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTraitAbbr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTraitDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDescription))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboTnstat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTnstat))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGroup)
                    .addComponent(cboTraitGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOntology, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblOntology)
                    .addComponent(btnBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSave)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        try {
            OntologyTool.openOntology(this.trait.getOntology());
        } catch (Exception ex) {
            //Exceptions.printStackTrace(ex);
        }


    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnAddScaleMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddScaleMethodActionPerformed
        addMeasuredIn();
    }//GEN-LAST:event_btnAddScaleMethodActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        saveOrUpdateTrait();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnSetAssStandarScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetAssStandarScaleActionPerformed
        setCurrentItemAsStandardScale();
    }//GEN-LAST:event_btnSetAssStandarScaleActionPerformed

    private void mnuSetAsStandarScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSetAsStandarScaleActionPerformed
        setCurrentItemAsStandardScale();
    }//GEN-LAST:event_mnuSetAsStandarScaleActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddScaleMethod;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSetAssStandarScale;
    private javax.swing.JComboBox cboMethod;
    private javax.swing.JComboBox cboScale;
    private javax.swing.JComboBox cboTnstat;
    private javax.swing.JComboBox cboTraitGroup;
    private javax.swing.JComboBox cboType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblGroup;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblMethod;
    private javax.swing.JLabel lblOntology;
    private javax.swing.JLabel lblTnstat;
    private javax.swing.JLabel lblTraitAbbr;
    private javax.swing.JLabel lblTraitid;
    private javax.swing.JLabel lblTraitname;
    private javax.swing.JLabel lblType;
    private javax.swing.JMenuItem mnuSetAsStandarScale;
    private javax.swing.JPopupMenu pMnuScales;
    private javax.swing.JTable tblMeasuredIn;
    private javax.swing.JTextField txtOntology;
    private javax.swing.JTextField txtTid;
    private javax.swing.JTextField txtTraitAbbr;
    private javax.swing.JTextField txtTraitDesc;
    private javax.swing.JTextField txtTraitId;
    private javax.swing.JTextField txtTraitName;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public Traits getTrait() {
        return trait;
    }

    public void setTrait(Traits trait) {
        this.trait = trait;
    }

    /**
     * Return current instance of TraitEditorTopComponent using current Traits object
     * @param scales Scale object to check
     * @return TraitEditorTopComponent instance if found or null if not found
     */
    public static TraitEditorTopComponent getTraitEditorTopComponent(Traits trait) {
        TraitEditorTopComponent traitEditorTopComponent = null;
        Set<TopComponent> comps = TopComponent.getRegistry().getOpened();
        for (TopComponent tc : comps) {
            if (tc instanceof TraitEditorTopComponent) {
                TraitEditorTopComponent setc = (TraitEditorTopComponent) tc;
                StringBuilder name = new StringBuilder();
                name.append(NbBundle.getMessage(TraitEditorTopComponent.class, "CTL_TraitEditorTopComponent"));
                name.append("(").append(trait.getTid()).append(")");

                if (setc.getName().equals(name.toString())) {
                    traitEditorTopComponent = setc;
                    break;
                }
            }
        }
        return traitEditorTopComponent;
    }

    /**
     * Enable disable editing if is a Central Trait
     */
    private void enableReadOnly() {

        cboTraitGroup.setSelectedItem(this.trait.getTraitGroup());
        if (trait.getTraittype() == null) {
            cboType.setSelectedIndex(0);
        } else if (trait.getTraittype() != null) {
            if (trait.getTraittype().equals(Traits.TRAIT_TYPE_FACTOR)) {
                cboType.setSelectedIndex(0);
            } else if (trait.getTraittype().equals(Traits.TRAIT_TYPE_CONSTANT)) {
                cboType.setSelectedIndex(1);
            } else if (trait.getTraittype().equals(Traits.TRAIT_TYPE_VARIATE)) {
                cboType.setSelectedIndex(2);
            }
        }



        fillMeasureindList();


        if (this.trait.getTid().intValue() > 0) {
            editable = false;
            txtTraitId.setEditable(editable);
            txtTraitName.setEditable(editable);
            txtTraitAbbr.setEditable(editable);
            txtTraitDesc.setEditable(editable);
            txtOntology.setEditable(editable);
            cboTnstat.setEnabled(editable);
            cboTraitGroup.setEnabled(editable);
            cboMethod.setEnabled(editable);
            cboScale.setEnabled(editable);
            cboType.setEnabled(editable);
            btnAddScaleMethod.setEnabled(editable);
            btnSave.setEnabled(editable);
        }
    }

    private void fillCboTraitGroup() {
        List<String> traitGroups = AppServicesProxy.getDefault().appServices().getTraitGroups();
        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) cboTraitGroup.getModel();
        dcbm.removeAllElements();

        for (String traitGroup : traitGroups) {
            dcbm.addElement(traitGroup);
        }
    }

    private void fillCboMethod() {
        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) cboMethod.getModel();
        dcbm.removeAllElements();
        dcbm.addElement(NbBundle.getMessage(TraitEditorTopComponent.class, "CboMethod.SelectOneMethod"));

        methodList = AppServicesProxy.getDefault().appServices().getTmsMethodList();

        for (TmsMethod tmsMethod : methodList) {
            dcbm.addElement(tmsMethod);
        }
    }

    private void fillCboScales() {
        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) cboScale.getModel();
        dcbm.removeAllElements();
        dcbm.addElement(NbBundle.getMessage(TraitEditorTopComponent.class, "CboScales.SelectOneScale"));

        scalesList = AppServicesProxy.getDefault().appServices().getScalesList();

        for (Scales scales : scalesList) {
            dcbm.addElement(scales);
        }
    }

    private void fillMeasureindList() {
        List<Measuredin> measuredinList = AppServicesProxy.getDefault().appServices().getMeasuredInListByTrait(this.trait.getTid());
        tblMeasuredIn.setModel(new MeasuredInTableModel(measuredinList));
    }

    private void addMeasuredIn() {
        StringBuilder message = new StringBuilder();


        if (cboScale.getSelectedIndex() == 0) {
            message.append(NbBundle.getMessage(TraitEditorTopComponent.class, "CboScales.PleaseSelectOneScale"));
            message.append(
                    "\n");
        }


        if (cboMethod.getSelectedIndex() == 0) {
            message.append(NbBundle.getMessage(TraitEditorTopComponent.class, "CboMethod.PleaseSelectOneMethod"));
            message.append(
                    "\n");
        }

        if (message.length() > 0) {
            DialogUtil.displayError(message.toString());
        } else {
            Scales selectedScale = (Scales) cboScale.getSelectedItem();
            TmsMethod selectedMethod = (TmsMethod) cboMethod.getSelectedItem();

            Measuredin measuredin = new Measuredin(true);


            measuredin.setTraitid(this.trait.getTraitid());
            measuredin.setStoredinid(this.trait.getTid());
            measuredin.setScaleid(selectedScale.getScaleid());
            measuredin.setScales(selectedScale);
           
            measuredin.setTmethid(selectedMethod.getTmethid());
            measuredin.setTmsMethod(selectedMethod);

            measuredin.setReport("-");
            measuredin.setFormula("-");

            // assign scale definition
            Object tmsScaleDef = null;
            if (selectedScale.getSctype().equals(Scales.SCALE_TYPE_CONTINOUS)) {
                tmsScaleDef = new TmsScaleCon(true);
            } else {
                tmsScaleDef = new TmsScaleDis(true);
            }
            measuredin.setTmsScaleDef(tmsScaleDef);
            

            MeasuredInTableModel measuredInTableModel = (MeasuredInTableModel) tblMeasuredIn.getModel();

            if (measuredInTableModel.isEmpty()) {
                measuredin.setStandardscale(Measuredin.STANTARD_SCALE_YES);
            } else {
                measuredin.setStandardscale(Measuredin.STANTARD_SCALE_NO);
            }



            if (measuredInTableModel.scaleMethodAlreadyExists(measuredin)) {
                DialogUtil.displayError(NbBundle.getMessage(MeasuredInTableModel.class, "Measuredin.scalemethodexists"));
            } else {
                measuredInTableModel.addMeasuredin(measuredin);
            }
        }
    }

    private void saveOrUpdateTrait() {
        MeasuredInTableModel measuredInTableModel = (MeasuredInTableModel) tblMeasuredIn.getModel();

        // a least must have one scale and method

       // if (measuredInTableModel.isEmpty()) {
       //     DialogUtil.displayError(NbBundle.getMessage(MeasuredInTableModel.class, "Measuredin.scaleandmethodrequired"));
         //   return;
        //}

        String traitGroup = (String) cboTraitGroup.getSelectedItem();
        trait.setTraitGroup(traitGroup);





        trait.setMeasuredins(measuredInTableModel.getMeasuredInList());

        switch (cboType.getSelectedIndex()) {
            case 0:
                trait.setTraittype(Traits.TRAIT_TYPE_FACTOR);
                break;
            case 1:
                trait.setTraittype(Traits.TRAIT_TYPE_CONSTANT);
                break;
            case 2:
                trait.setTraittype(Traits.TRAIT_TYPE_VARIATE);
                break;

        }

        if (trait.getTid() == 0) {
            AppServicesProxy.getDefault().appServices().addOrUpdateTmsTrait(trait);
            DialogUtil.displayInfo("Trait added");
        } else {
            AppServicesProxy.getDefault().appServices().addOrUpdateTmsTrait(trait);
            DialogUtil.displayInfo("Trait updated");
        }
    }

    /**
     * 
     */
    private void setCurrentItemAsStandardScale() {
        MeasuredInTableModel measuredInTableModel = (MeasuredInTableModel)tblMeasuredIn.getModel();
        measuredInTableModel.setAsStandarScale(tblMeasuredIn.getSelectedRow());
         
    }
    
//    private void addNewValue(java.awt.event.KeyEvent evt) {
//        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//            DefaultListModel defaultListModel = (DefaultListModel)lstValues.getModel();
//            defaultListModel.addElement(txtValueDesc.getText());
//            txtValueDesc.setText("");
//        }
//    }
    
    private void assignColumnSizes() {
        tblMeasuredIn.getColumnModel().getColumn(0).setPreferredWidth(MeasuredInTableModel.SCALE_ID_SIZE);
        tblMeasuredIn.getColumnModel().getColumn(1).setPreferredWidth(MeasuredInTableModel.SCALE_NAME_SIZE);
        tblMeasuredIn.getColumnModel().getColumn(2).setPreferredWidth(MeasuredInTableModel.SCALE_TYPE_SIZE);
        tblMeasuredIn.getColumnModel().getColumn(3).setPreferredWidth(MeasuredInTableModel.SCALE_DATATYPE_SIZE);
        tblMeasuredIn.getColumnModel().getColumn(4).setPreferredWidth(MeasuredInTableModel.SCALE_STANDARD_SIZE);
        tblMeasuredIn.getColumnModel().getColumn(5).setPreferredWidth(MeasuredInTableModel.METHOD_ID_SIZE);
        tblMeasuredIn.getColumnModel().getColumn(6).setPreferredWidth(MeasuredInTableModel.METHOD_NAME_SIZE);
        tblMeasuredIn.getColumnModel().getColumn(0).setMaxWidth(MeasuredInTableModel.SCALE_ID_SIZE);
        tblMeasuredIn.getColumnModel().getColumn(1).setMaxWidth(MeasuredInTableModel.SCALE_NAME_SIZE);
        tblMeasuredIn.getColumnModel().getColumn(2).setMaxWidth(MeasuredInTableModel.SCALE_TYPE_SIZE);
        tblMeasuredIn.getColumnModel().getColumn(3).setMaxWidth(MeasuredInTableModel.SCALE_DATATYPE_SIZE);
        tblMeasuredIn.getColumnModel().getColumn(4).setMaxWidth(MeasuredInTableModel.SCALE_STANDARD_SIZE);
        tblMeasuredIn.getColumnModel().getColumn(5).setMaxWidth(MeasuredInTableModel.METHOD_ID_SIZE);
        tblMeasuredIn.getColumnModel().getColumn(6).setMaxWidth(MeasuredInTableModel.METHOD_NAME_SIZE);
        
    }
    
    private void assignScaleDefinitionRowEditor() {
        ScaleRowEditor scaleRowEditor = new ScaleRowEditor();
        TableColumn valueColumn = tblMeasuredIn.getColumnModel().getColumn(7);
        valueColumn.setCellEditor(scaleRowEditor);
    }
}
