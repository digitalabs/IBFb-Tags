/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SelectPersonPanel.java
 *
 * Created on Dec 15, 2011, 4:30:21 PM
 */
package ibfb.studyeditor.util;

import java.util.List;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.cimmyt.cril.ibwb.api.AppServicesProxy;
import org.cimmyt.cril.ibwb.commongui.DialogUtil;
import org.cimmyt.cril.ibwb.domain.Cntry;
import org.cimmyt.cril.ibwb.domain.Institut;
import org.cimmyt.cril.ibwb.domain.Persons;

/**
 *
 * @author mulat
 */
public class SelectPersonPanel extends javax.swing.JPanel {

    private Cntry currentCountry;
    private Institut currentInstitute;
    private List<Cntry> countryList;
    private List<Institut> instituteList;
    private List<Persons> personList;
    private TableRowSorter<TableModel> sorter;
    private String INSTITUTE_ID = "instituteId";
    private String COUNTRY_ID = "countryId";
    private String PERSON_ID = "personId";

    /** Creates new form SelectPersonPanel */
    public SelectPersonPanel() {
        initComponents();
        initCountryBox();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cboCountry = new javax.swing.JComboBox();
        cboInstitute = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        chosenPerson = new javax.swing.JTextField();
        chosenPersonId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        personCount = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        jLabel1.setText(org.openide.util.NbBundle.getMessage(SelectPersonPanel.class, "SelectPersonPanel.jLabel1.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(SelectPersonPanel.class, "SelectPersonPanel.jLabel2.text")); // NOI18N

        cboCountry.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboCountry.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboCountryItemStateChanged(evt);
            }
        });

        cboInstitute.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboInstitute.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboInstituteItemStateChanged(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        chosenPerson.setText(org.openide.util.NbBundle.getMessage(SelectPersonPanel.class, "SelectPersonPanel.chosenPerson.text")); // NOI18N

        chosenPersonId.setText(org.openide.util.NbBundle.getMessage(SelectPersonPanel.class, "SelectPersonPanel.chosenPersonId.text")); // NOI18N
        chosenPersonId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chosenPersonIdActionPerformed(evt);
            }
        });

        jLabel3.setText(org.openide.util.NbBundle.getMessage(SelectPersonPanel.class, "SelectPersonPanel.jLabel3.text")); // NOI18N

        jLabel4.setText(org.openide.util.NbBundle.getMessage(SelectPersonPanel.class, "SelectPersonPanel.jLabel4.text")); // NOI18N

        jButton2.setText(org.openide.util.NbBundle.getMessage(SelectPersonPanel.class, "SelectPersonPanel.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButton2))
                    .addComponent(chosenPerson)
                    .addComponent(chosenPersonId))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(chosenPersonId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(chosenPerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap())
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        personCount.setText(org.openide.util.NbBundle.getMessage(SelectPersonPanel.class, "SelectPersonPanel.personCount.text")); // NOI18N

        jLabel6.setText(org.openide.util.NbBundle.getMessage(SelectPersonPanel.class, "SelectPersonPanel.jLabel6.text")); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addGap(42, 42, 42)
                .addComponent(personCount, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(326, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(personCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(31, 31, 31)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cboInstitute, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cboCountry, 0, 341, Short.MAX_VALUE))))))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cboCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cboInstitute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 543, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 470, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cboCountryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboCountryItemStateChanged
        String chosenCountry = cboCountry.getSelectedItem().toString();
        currentCountry = getCountryDetails(countryList, chosenCountry);
        if (currentCountry == null || currentCountry.getCntryid() == 0) {
            loadInstitute(0);
            loadPerson(COUNTRY_ID, 0);
        } else {
            loadInstitute(currentCountry.getCntryid());
            loadPerson(COUNTRY_ID, currentCountry.getCntryid());
        }
        clearFields(1);

    }//GEN-LAST:event_cboCountryItemStateChanged

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int row = jTable1.getSelectedRow();
        String personId = (String) jTable1.getValueAt(row, 0);
        String fname = (String) jTable1.getValueAt(row, 1);
        String lname = (String) jTable1.getValueAt(row, 2);

        chosenPersonId.setText(personId);
        chosenPerson.setText(lname.toUpperCase() + " " + fname.toUpperCase());
    }//GEN-LAST:event_jTable1MouseClicked

    private void cboInstituteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboInstituteItemStateChanged
        String chosenInstitute = cboInstitute.getSelectedItem().toString();
        currentInstitute = getInstituteDetails(instituteList, chosenInstitute);

        if (currentInstitute != null) {
            if (currentInstitute.getInstitid() != 0) {
                loadPerson(INSTITUTE_ID, currentInstitute.getInstitid());
            }
        }
        clearFields(1);
    }//GEN-LAST:event_cboInstituteItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        clearFields(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void chosenPersonIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chosenPersonIdActionPerformed
        getPersonById(chosenPersonId.getText());
    }//GEN-LAST:event_chosenPersonIdActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboCountry;
    private javax.swing.JComboBox cboInstitute;
    private javax.swing.JTextField chosenPerson;
    private javax.swing.JTextField chosenPersonId;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField personCount;
    // End of variables declaration//GEN-END:variables

    private void initCountryBox() {
        countryList = AppServicesProxy.getDefault().appServices().getCntryList();

        SortedComboBoxModel cboCountryModel = new SortedComboBoxModel();

        for (Cntry country : countryList) {
            if (!country.getIsoabbr().startsWith("-")) {
                cboCountryModel.addElement(country.getIsoabbr());
            }

        }
        cboCountryModel.addElement("-Choose Country-");
        cboCountry.setModel(cboCountryModel);
        cboCountry.setSelectedIndex(0);
    }

    private Cntry getCountryDetails(List<Cntry> countryList, String chosenCountry) {
        Cntry country = null;
        for (Cntry ctry : countryList) {
            if (ctry.getIsoabbr().equals(chosenCountry)) {
                country = ctry;
            }
        }
        return country;
    }

    private void loadInstitute(int locid) {
        SortedComboBoxModel cboInstituteModel = new SortedComboBoxModel();

        if (locid == 0) {
            instituteList = AppServicesProxy.getDefault().appServices().getInstitutList();
        } else {
            Institut instituteFilter = new Institut(true);
            instituteFilter.setCntryid(locid);
            instituteList = AppServicesProxy.getDefault().appServices().getListInstitut(instituteFilter, 0, 0, false);
        }
        if (instituteList.isEmpty()) {
            if (currentCountry != null) {
                cboInstituteModel.addElement("-No Institute for " + currentCountry.getIsoabbr() + "-");
            } else {
                cboInstituteModel.addElement("-No Institute for current country -");
            }
        } else {
            for (Institut institute : instituteList) {
                cboInstituteModel.addElement(institute.getInsname());
            }
            cboInstituteModel.addElement("-Choose Institute-");
        }
        cboInstitute.setModel(cboInstituteModel);
        cboInstitute.setSelectedIndex(0);
    }

    private void loadPerson(String IdType, int id) {

        if (id == 0) {
            personList = AppServicesProxy.getDefault().appServices().getPersonsList();
        } else {// IdType is cntryid
            if (IdType.equals(COUNTRY_ID)) {
                personList.removeAll(personList);
                for (Institut institute : instituteList) {
                    int institid = institute.getInstitid();
                    Persons personFilter = new Persons(true);
                    personFilter.setInstitid(institid);
                    List<Persons> personList_0 = AppServicesProxy.getDefault().appServices().getListPersons(personFilter, 0, 0, false);
                    personList.addAll(personList_0);
                }
            } else if (IdType.equals(INSTITUTE_ID)) {  // IdType is institutId
                Persons personFilter = new Persons(true);
                personFilter.setInstitid(id);
                personList = AppServicesProxy.getDefault().appServices().getListPersons(personFilter, 0, 0, false);
            }
        }

        personCount.setText(Integer.toString(personList.size()));
        myTableModel();
    }

    private void myTableModel() {
        TableModel tableModel = new AbstractTableModel() {

            @Override
            public int getRowCount() {
                return personList.size();
            }

            @Override
            public int getColumnCount() {
                return 3;
            }

            @Override
            public String getValueAt(int i, int i1) {
                Persons person = personList.get(i);
                switch (i1) {
                    case 0:
                        return person.getPersonid().toString();
                    case 1:
                        return person.getFname();
                    case 2:
                        return person.getLname();
                    default:
                        return null;
                }
            }
        };
        sorter = new TableRowSorter<TableModel>(tableModel);
        int row = 0;
        for (Persons person : personList) {
            if (person.getFname().startsWith(".") || person.getLname().startsWith(".")) {
                continue;
            } else {
                tableModel.setValueAt(person.getPersonid(), row, 0);
                tableModel.setValueAt(person.getLname(), row, 1);
                tableModel.setValueAt(person.getFname(), row, 2);
                row++;
            }
        }
        jTable1.setRowSorter(sorter);
        jTable1.setModel(tableModel);
    }

    private void getPersonById(int id) {
        Persons personFilter = new Persons(true);
        personFilter.setPersonid(id);
        List<Persons> pList = AppServicesProxy.getDefault().appServices().getListPersons(personFilter, 0, 0, false);
        if (pList.size() == 1) {
            chosenPerson.setText(pList.get(0).getFname() + " " + pList.get(0).getLname());
        }
    }

    private void clearFields(int scope) {
        switch (scope) {
            case 0:
                //  cboCountry.setSelectedItem(0);
                initCountryBox();
            case 1:
                chosenPerson.setText("");
                chosenPersonId.setText("");
                break;
            default:
                System.out.println("Unknown scope code. Nothing is cleared");
        }

    }

    private Institut getInstituteDetails(List<Institut> instituteList, String chosenInstitute) {
        Institut institute = null;
        for (Institut institut : instituteList) {
            if (institut.getInsname().equals(chosenInstitute)) {
                institute = institut;
            }
        }
        return institute;
    }

    private void getPersonById(String Id) {
        if (!Id.isEmpty()) {
            int chosenPerId = Integer.parseInt(Id);
            getPersonById(chosenPerId);
        }
    }
    
    
     public Integer getPersonId() {
        Integer personId = null;
        
        if (! chosenPersonId.getText().trim().isEmpty()) {
            personId = Integer.parseInt(chosenPersonId.getText());
        }
        
        return personId;
    }
    
    public String getPersonName() {
        String personName = "";
        
        if ( ! chosenPerson.getText().trim().isEmpty()) {
            personName = chosenPerson.getText();
        }
        
        return personName;
    }
}
