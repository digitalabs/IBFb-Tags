/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ibfb.studyeditor.reports;

import java.awt.BorderLayout;
import java.awt.Container;
import java.io.Serializable;
import java.util.logging.Logger;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JRViewer;

import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//ibfb.studyeditor.reports//ReportViewer//EN",
autostore = false)
@TopComponent.Description(preferredID = "ReportViewerTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "ibfb.studyeditor.reports.ReportViewerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_ReportViewerAction",
preferredID = "ReportViewerTopComponent")
public final class ReportViewerTopComponent extends TopComponent {

    private static ReportViewerTopComponent instance;
    /** path to the icon used by the component and its open action */
    //    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "JRViewerTopComponent";

    public void setJasperPrint(JasperPrint jasperReport) {
        JRViewer viewer = new JRViewer(jasperReport);
        this.removeAll();
        this.add(viewer, BorderLayout.CENTER);
        this.updateUI();
    }

    public ReportViewerTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ReportViewerTopComponent.class, "CTL_ReportViewerTopComponent"));
        setToolTipText(NbBundle.getMessage(ReportViewerTopComponent.class, "HINT_ReportViewerTopComponent"));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized ReportViewerTopComponent getDefault() {
        if (instance == null) {
            instance = new ReportViewerTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the JRViewerTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ReportViewerTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(
                PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(ReportViewerTopComponent.class.getName()).warning(
                    "Cannot find "
                    + PREFERRED_ID
                    + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ReportViewerTopComponent) {
            return (ReportViewerTopComponent) win;
        }
        Logger.getLogger(ReportViewerTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '"
                + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version

    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return ReportViewerTopComponent.getDefault();
        }
    }
}
