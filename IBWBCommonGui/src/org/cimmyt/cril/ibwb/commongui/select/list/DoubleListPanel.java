package org.cimmyt.cril.ibwb.commongui.select.list;

import java.awt.datatransfer.DataFlavor;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.SwingUtilities;

/**
 *
 * @author TMSANCHEZ
 */
public class DoubleListPanel<T> extends javax.swing.JPanel {

    private List<T> sourceList;
    private List<T> targetList;
    private ListTransferHandler listTransferHandler = new ListTransferHandler();
    private SelectCommand sourceCommand;
    private SelectCommand targetCommand;

    /** Creates new form DoubleListPanel */
    public DoubleListPanel() {
        initComponents();
    }

    public DoubleListPanel(List<T> sourceList, List<T> targetList) {
        initComponents();
        this.sourceList = sourceList;
        this.targetList = targetList;
        initList();
    }

    public DoubleListPanel(List<T> sourceList, List<T> targetList, SelectCommand sourceCommand, SelectCommand targetCommand) {
        initComponents();
        this.sourceList = sourceList;
        this.targetList = targetList;
        this.sourceCommand = sourceCommand;
        this.targetCommand = targetCommand;
        initList();

    }

    private void initList() {
        jLstSource.setTransferHandler(listTransferHandler);
        jLstTarget.setTransferHandler(listTransferHandler);

        jLstSource.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent me) {
                if (SwingUtilities.isRightMouseButton(me)
                        && !jLstSource.isSelectionEmpty()) {
                    jPopSelect.show(jLstSource, me.getX(), me.getY());
                }

                if (SwingUtilities.isLeftMouseButton(me) && !jLstSource.isSelectionEmpty()) {
                    if (jLstSource.getSelectedIndices().length == 1) {

                        if (sourceCommand != null) {
                            sourceCommand.execute();
                        }

                    }
                }


            }
        });

        jLstTarget.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent me) {
                if (SwingUtilities.isRightMouseButton(me)
                        && !jLstTarget.isSelectionEmpty()) {
                    jPopUnselect.show(jLstTarget, me.getX(), me.getY());
                }

                if (SwingUtilities.isLeftMouseButton(me) && !jLstTarget.isSelectionEmpty()) {
                    if (jLstTarget.getSelectedIndices().length == 1) {

                        if (targetCommand != null) {
                            targetCommand.execute();
                        }

                    }
                }


            }
        });

        fillListItems();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopSelect = new javax.swing.JPopupMenu();
        jMnuAdd = new javax.swing.JMenuItem();
        jMnuAddAll = new javax.swing.JMenuItem();
        jPopUnselect = new javax.swing.JPopupMenu();
        jMnuRemoveAll = new javax.swing.JMenuItem();
        jMnuRemove = new javax.swing.JMenuItem();
        lblAvaibleItems = new javax.swing.JLabel();
        lblSelectedItems = new javax.swing.JLabel();
        scrlSource = new javax.swing.JScrollPane();
        jLstSource = new javax.swing.JList();
        scrlTarget = new javax.swing.JScrollPane();
        jLstTarget = new javax.swing.JList();
        txtSearchSource = new javax.swing.JTextField();
        txtSearchTarget = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnAddAll = new javax.swing.JButton();
        btnRemoveAll = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        lblSearchSource = new javax.swing.JLabel();
        lblSearchTarget = new javax.swing.JLabel();

        jMnuAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/cimmyt/cril/ibwb/commongui/select/list/add16.png"))); // NOI18N
        jMnuAdd.setText(org.openide.util.NbBundle.getMessage(DoubleListPanel.class, "DoubleListPanel.jMnuAdd.text")); // NOI18N
        jMnuAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMnuAddActionPerformed(evt);
            }
        });
        jPopSelect.add(jMnuAdd);

        jMnuAddAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/cimmyt/cril/ibwb/commongui/select/list/addall16.png"))); // NOI18N
        jMnuAddAll.setText(org.openide.util.NbBundle.getMessage(DoubleListPanel.class, "DoubleListPanel.jMnuAddAll.text")); // NOI18N
        jMnuAddAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMnuAddAllActionPerformed(evt);
            }
        });
        jPopSelect.add(jMnuAddAll);

        jMnuRemoveAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/cimmyt/cril/ibwb/commongui/select/list/removeall16.png"))); // NOI18N
        jMnuRemoveAll.setText(org.openide.util.NbBundle.getMessage(DoubleListPanel.class, "DoubleListPanel.jMnuRemoveAll.text")); // NOI18N
        jMnuRemoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMnuRemoveAllActionPerformed(evt);
            }
        });
        jPopUnselect.add(jMnuRemoveAll);

        jMnuRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/cimmyt/cril/ibwb/commongui/select/list/remove16.png"))); // NOI18N
        jMnuRemove.setText(org.openide.util.NbBundle.getMessage(DoubleListPanel.class, "DoubleListPanel.jMnuRemove.text")); // NOI18N
        jMnuRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMnuRemoveActionPerformed(evt);
            }
        });
        jPopUnselect.add(jMnuRemove);

        lblAvaibleItems.setText(org.openide.util.NbBundle.getMessage(DoubleListPanel.class, "DoubleListPanel.lblAvaibleItems.text")); // NOI18N

        lblSelectedItems.setText(org.openide.util.NbBundle.getMessage(DoubleListPanel.class, "DoubleListPanel.lblSelectedItems.text")); // NOI18N

        jLstSource.setModel(new DefaultListModel());
        jLstSource.setDragEnabled(true);
        scrlSource.setViewportView(jLstSource);

        jLstTarget.setModel(new DefaultListModel());
        jLstTarget.setDragEnabled(true);
        scrlTarget.setViewportView(jLstTarget);

        txtSearchSource.setText(org.openide.util.NbBundle.getMessage(DoubleListPanel.class, "DoubleListPanel.txtSearchSource.text")); // NOI18N
        txtSearchSource.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchSourceKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchSourceKeyTyped(evt);
            }
        });

        txtSearchTarget.setText(org.openide.util.NbBundle.getMessage(DoubleListPanel.class, "DoubleListPanel.txtSearchTarget.text")); // NOI18N
        txtSearchTarget.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchTargetKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchTargetKeyTyped(evt);
            }
        });

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/cimmyt/cril/ibwb/commongui/select/list/add32.png"))); // NOI18N
        btnAdd.setText(org.openide.util.NbBundle.getMessage(DoubleListPanel.class, "DoubleListPanel.btnAdd.text")); // NOI18N
        btnAdd.setActionCommand(org.openide.util.NbBundle.getMessage(DoubleListPanel.class, "DoubleListPanel.btnAdd.actionCommand")); // NOI18N
        btnAdd.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnAddAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/cimmyt/cril/ibwb/commongui/select/list/addall32.png"))); // NOI18N
        btnAddAll.setText(org.openide.util.NbBundle.getMessage(DoubleListPanel.class, "DoubleListPanel.btnAddAll.text")); // NOI18N
        btnAddAll.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnAddAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAllActionPerformed(evt);
            }
        });

        btnRemoveAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/cimmyt/cril/ibwb/commongui/select/list/removeall32.png"))); // NOI18N
        btnRemoveAll.setText(org.openide.util.NbBundle.getMessage(DoubleListPanel.class, "DoubleListPanel.btnRemoveAll.text")); // NOI18N
        btnRemoveAll.setActionCommand(org.openide.util.NbBundle.getMessage(DoubleListPanel.class, "DoubleListPanel.btnRemoveAll.actionCommand")); // NOI18N
        btnRemoveAll.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnRemoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveAllActionPerformed(evt);
            }
        });

        btnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/cimmyt/cril/ibwb/commongui/select/list/remove32.png"))); // NOI18N
        btnRemove.setText(org.openide.util.NbBundle.getMessage(DoubleListPanel.class, "DoubleListPanel.btnRemove.text")); // NOI18N
        btnRemove.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        lblSearchSource.setText(org.openide.util.NbBundle.getMessage(DoubleListPanel.class, "DoubleListPanel.lblSearchSource.text")); // NOI18N

        lblSearchTarget.setText(org.openide.util.NbBundle.getMessage(DoubleListPanel.class, "DoubleListPanel.lblSearchTarget.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblAvaibleItems)
                        .addGap(174, 174, 174))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(lblSearchSource)
                                .addGap(18, 18, 18)
                                .addComponent(txtSearchSource, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE))
                            .addComponent(scrlSource, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnRemoveAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                            .addComponent(btnAddAll, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                            .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE))
                        .addGap(14, 14, 14)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSelectedItems)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblSearchTarget)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtSearchTarget, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))
                        .addComponent(scrlTarget, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAvaibleItems)
                            .addComponent(lblSelectedItems))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearchSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSearchTarget, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSearchSource)
                            .addComponent(lblSearchTarget))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrlSource, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                            .addComponent(scrlTarget, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemoveAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        doAddAction();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnAddAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAllActionPerformed
        doAddAllAction();
    }//GEN-LAST:event_btnAddAllActionPerformed

    private void btnRemoveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveAllActionPerformed
        doRemoveAllAction();

    }//GEN-LAST:event_btnRemoveAllActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        doRemoveAction();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void jMnuRemoveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMnuRemoveAllActionPerformed
        doRemoveAllAction();
    }//GEN-LAST:event_jMnuRemoveAllActionPerformed

    private void jMnuAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMnuAddActionPerformed
        doAddAction();
    }//GEN-LAST:event_jMnuAddActionPerformed

    private void jMnuRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMnuRemoveActionPerformed
        doRemoveAction();
    }//GEN-LAST:event_jMnuRemoveActionPerformed

    private void jMnuAddAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMnuAddAllActionPerformed
        doAddAllAction();
    }//GEN-LAST:event_jMnuAddAllActionPerformed

    private void txtSearchTargetKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchTargetKeyTyped
    }//GEN-LAST:event_txtSearchTargetKeyTyped

    private void txtSearchSourceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchSourceKeyTyped
    }//GEN-LAST:event_txtSearchSourceKeyTyped

    private void txtSearchSourceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchSourceKeyReleased
        String prefix = txtSearchSource.getText();

        int start = 0;
        try {
            int itemIx = jLstSource.getNextMatch(prefix, start, javax.swing.text.Position.Bias.Forward);

            jLstSource.setSelectedIndex(itemIx);
            jLstSource.ensureIndexIsVisible(itemIx);

        } catch (IllegalArgumentException ex) {
        }
    }//GEN-LAST:event_txtSearchSourceKeyReleased

    private void txtSearchTargetKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchTargetKeyReleased
        String prefix = txtSearchTarget.getText();

        int start = 0;
        try {
            int itemIx = jLstTarget.getNextMatch(prefix, start, javax.swing.text.Position.Bias.Forward);

            jLstTarget.setSelectedIndex(itemIx);
            jLstTarget.ensureIndexIsVisible(itemIx);

        } catch (IllegalArgumentException ex) {
        }
    }//GEN-LAST:event_txtSearchTargetKeyReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddAll;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnRemoveAll;
    private javax.swing.JList jLstSource;
    private javax.swing.JList jLstTarget;
    private javax.swing.JMenuItem jMnuAdd;
    private javax.swing.JMenuItem jMnuAddAll;
    private javax.swing.JMenuItem jMnuRemove;
    private javax.swing.JMenuItem jMnuRemoveAll;
    private javax.swing.JPopupMenu jPopSelect;
    private javax.swing.JPopupMenu jPopUnselect;
    private javax.swing.JLabel lblAvaibleItems;
    private javax.swing.JLabel lblSearchSource;
    private javax.swing.JLabel lblSearchTarget;
    private javax.swing.JLabel lblSelectedItems;
    private javax.swing.JScrollPane scrlSource;
    private javax.swing.JScrollPane scrlTarget;
    private javax.swing.JTextField txtSearchSource;
    private javax.swing.JTextField txtSearchTarget;
    // End of variables declaration//GEN-END:variables

    public void fillListItems() {
        DefaultListModel dlmSource = (DefaultListModel) jLstSource.getModel();
        dlmSource.clear();
        for (T sourceItem : sourceList) {
            dlmSource.addElement(sourceItem);
        }
        DefaultListModel dlmTarget = (DefaultListModel) jLstTarget.getModel();
        dlmTarget.clear();
        for (T targetItem : targetList) {
            dlmTarget.addElement(targetItem);
        }

    }

    public List<T> getSourceList() {            
        sourceList.clear();
        DefaultListModel dlmTarget = (DefaultListModel) jLstSource.getModel();
        for (int index = 0; index < dlmTarget.getSize(); index++) {
            sourceList.add((T) dlmTarget.getElementAt(index));
        }
        return sourceList;
        
    }

    public void setSourceList(List<T> sourceList) {
        this.sourceList = sourceList;
    }

    public List<T> getTargetList() {
        targetList.clear();
        DefaultListModel dlmTarget = (DefaultListModel) jLstTarget.getModel();
        for (int index = 0; index < dlmTarget.getSize(); index++) {
            targetList.add((T) dlmTarget.getElementAt(index));
        }
        return targetList;
    }

    public void setTargetList(List<T> targetList) {
        this.targetList = targetList;
    }

    public JList getjLstSource() {
        return jLstSource;
    }

    public void setjLstSource(JList jLstSource) {
        this.jLstSource = jLstSource;
    }

    public JList getjLstTarget() {
        return jLstTarget;
    }

    public void setjLstTarget(JList jLstTarget) {
        this.jLstTarget = jLstTarget;
    }

    /**
     * 
     */
    private void doAddAction() {
        DefaultListModel dlmSource = (DefaultListModel) jLstSource.getModel();

        DefaultListModel dlmTarget = (DefaultListModel) jLstTarget.getModel();
        Object[] selectedItems = jLstSource.getSelectedValues();
        for (Object object : selectedItems) {
            dlmTarget.addElement(object);
        }
        for (Object object : selectedItems) {
            dlmSource.removeElement(object);
        }
    }

    /**
     * 
     */
    private void doAddAllAction() {
        DefaultListModel dlmSource = (DefaultListModel) jLstSource.getModel();

        DefaultListModel dlmTarget = (DefaultListModel) jLstTarget.getModel();

        for (int index = 0; index < dlmSource.getSize(); index++) {
            dlmTarget.addElement(dlmSource.getElementAt(index));
        }

        dlmSource.clear();
    }

    /**
     * 
     */
    private void doRemoveAllAction() {
        DefaultListModel dlmSource = (DefaultListModel) jLstSource.getModel();

        DefaultListModel dlmTarget = (DefaultListModel) jLstTarget.getModel();

        for (int index = 0; index < dlmTarget.getSize(); index++) {
            dlmSource.addElement(dlmTarget.getElementAt(index));
        }

        dlmTarget.clear();
    }

    /**
     * 
     */
    private void doRemoveAction() {
        DefaultListModel dlmSource = (DefaultListModel) jLstSource.getModel();

        DefaultListModel dlmTarget = (DefaultListModel) jLstTarget.getModel();
        Object[] selectedItems = jLstTarget.getSelectedValues();
        for (Object object : selectedItems) {
            dlmSource.addElement(object);
        }
        for (Object object : selectedItems) {
            dlmTarget.removeElement(object);
        }
    }

    /**
     * 
     * @param text 
     */
    public void setSourceLabel(String text) {
        lblAvaibleItems.setText(text);
    }

    /**
     * 
     * @param text 
     */
    public void setTargetLabel(String text) {
        lblSelectedItems.setText(text);
    }

    /**
     * Returns a selected object from source list
     * @return 
     */
    public T getSelectedSourceItem() {
        T selectedSourceItem = null;

        if (jLstSource.getSelectedIndices().length == 1) {
            selectedSourceItem = (T) jLstSource.getSelectedValue();
        }

        return selectedSourceItem;
    }

    /**
     * Returns a selected object from source list
     * @return 
     */
    public T getSelectedTargetItem() {
        T selectedTargetItem = null;

        if (jLstTarget.getSelectedIndices().length == 1) {
            selectedTargetItem = (T) jLstTarget.getSelectedValue();
        }

        return selectedTargetItem;
    }

    /**
     * 
     * @param aditionalDataFlavor 
     */
    public void setAdditionalTransferHandler(DataFlavor aditionalDataFlavor) {
        this.listTransferHandler.setAdditionalDataFlavorSupported(aditionalDataFlavor);
    }

    public void setDropTargetCommand(DropTargetCommand dropTargetCommand) {
        this.listTransferHandler.setDropTargetCommand(dropTargetCommand);
    }

    public void addToTarget(T item) {
        DefaultListModel dlmTarget = (DefaultListModel) jLstTarget.getModel();
        dlmTarget.addElement(item);
    }
}
